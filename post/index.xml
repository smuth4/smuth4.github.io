<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on cat /dev/null &gt; /proc/mind</title>
    <link>https://smuth.me/post/</link>
    <description>Recent content in Posts on cat /dev/null &gt; /proc/mind</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 11 Oct 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://smuth.me/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Enabling NFS mounts in Proxmox 5.2 LXC containers</title>
      <link>https://smuth.me/post/enabling-nfs-proxmox-lxc/</link>
      <pubDate>Thu, 11 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://smuth.me/post/enabling-nfs-proxmox-lxc/</guid>
      <description>Normally, Proxmox doesn&amp;rsquo;t allow mounting NFS mounts directly in containers due to security concerns. In the past it was possible to modify apparmor profiles directly in order to allow it, as seen here and here. However, as of this commit, that method is no longer an option, due to the apparmor profiles now being generated dynamically when the containers are started (you can view these profiles at /var/lib/lxc/${CID}/apparmor/lxc-${CID}_&amp;lt;-var-lib-lxc&amp;gt;). Instead, modifying apparmor directly is no longer necessary, as you can now add the undocumented feature setting to the pct.</description>
    </item>
    
    <item>
      <title>SSH public key shenanigans</title>
      <link>https://smuth.me/post/ssh-public-key-shenanigans/</link>
      <pubDate>Wed, 19 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://smuth.me/post/ssh-public-key-shenanigans/</guid>
      <description>A fun little fact I discovered about SSH: when you specify a private key to use, it checks ${key}.pub for hints about how to parse the private key, without warning. Under normal operations this is never a problem, but you need to replace a private key in-place, and don&amp;rsquo;t update the .pub file, authentication will fail:
$ ls -la ssh.key ssh.key.pub $ ssh user@host echo ping user@host&amp;#39;s password: ^C $ mv ssh.</description>
    </item>
    
    <item>
      <title>Enabling jumbo frames on Proxmox 4</title>
      <link>https://smuth.me/post/proxmox-4-enabling-jumbo-frames/</link>
      <pubDate>Sun, 02 Oct 2016 15:58:01 +0000</pubDate>
      
      <guid>https://smuth.me/post/proxmox-4-enabling-jumbo-frames/</guid>
      <description>While turning on jumbo frames on a basic interface is straightforward (ip link set eth0 mtu 9000), Proxmox&amp;rsquo;s use of bridges to connect VMs makes things much more interesting. To start with, all interfaces connected to the bridge must have their MTUs upgraded first, otherwise it will give you an unhelpful error. Note that interfaces connected to the bridge include those of running containers/VMs.1
# ip a | grep mtu 1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1 2: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc mq master vmbr0 state UP group default qlen 1000 3: vmbr0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc noqueue state UP group default qlen 1000 4: veth102i0@if7: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc noqueue master vmbr0 state UP group default qlen 1000 # ip link set dev vmbr0 mtu 9000 RTNETLINK answers: Invalid argument # ip link set dev eth0 mtu 9000 # ip link set dev veth102i0 mtu 9000 # ip link set dev vmbr0 mtu 9000  Note that setting the MTU on vmbr0 is technically unnecessary, since bridges inherit the smallest MTU of the slaved devices2.</description>
    </item>
    
    <item>
      <title>Upgrading from PHP 5.5 to 5.6 on FreeBSD</title>
      <link>https://smuth.me/post/freebsd-upgrading-php55-to-56/</link>
      <pubDate>Sun, 31 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://smuth.me/post/freebsd-upgrading-php55-to-56/</guid>
      <description>Recently PHP 5.5 got EOL&amp;rsquo;d, but PHP 5.6 will be supported for another two years. On Debian, this is a just a matter of upgrading the php5 package, but FreeBSD splits it out into two packages: php55 and php56, not to mention that extensions are also split out this way. The fact that I&amp;rsquo;ve installed php via ports also complicates things.
Doing the deed This assumes portmaster is installed.</description>
    </item>
    
    <item>
      <title>Making Terraform work with PowerDNS 4</title>
      <link>https://smuth.me/post/powerdns-4-with-terraform/</link>
      <pubDate>Sun, 01 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://smuth.me/post/powerdns-4-with-terraform/</guid>
      <description>Edit: This post has been made obsolete by a pull request I opened in the terraform repository: https://github.com/hashicorp/terraform/pull/7819
I&amp;rsquo;ve really enjoyed using PowerDNS as my DNS server at home. Most people only think of BIND and dnsmasq when it comes to DNS, while ignoring this stable, scalable, secure database-backed offering that powers some really large deployments. But enough proselytizing! I&amp;rsquo;m in the middle of trying to migrate my infrastructure to be controlled via Terraform (mostly).</description>
    </item>
    
    <item>
      <title>Picking a blogging platform.</title>
      <link>https://smuth.me/post/blog/</link>
      <pubDate>Sun, 24 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://smuth.me/post/blog/</guid>
      <description>I&amp;rsquo;ve been bouncing around between picking a blog platform, and realized I should really settle down and stick with one. This is mostly a page to track my decision-making, and isn&amp;rsquo;t meant to be an objective comparison of different platforms. The one thing I&amp;rdquo;ll be limiting myself to is static site generators. They&amp;rsquo;re light, easy to write to, and I can keep my blog in source control.
The markup language I&amp;rsquo;d really rather avoid having to learn a wholle new markup, so that effectively limits me to either Markdown or ReST.</description>
    </item>
    
    <item>
      <title>Using shush as a crontab wrapper</title>
      <link>https://smuth.me/post/using-shush-as-a-crontab-wrapper/</link>
      <pubDate>Sat, 11 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://smuth.me/post/using-shush-as-a-crontab-wrapper/</guid>
      <description>Cron is a great tool for linux servers, but it&#39;s a very limited in it&#39;s capabilities (since it follows the Unix philosophy), so when I started to run up against those limits, I began doing all sorts of bash trickery to accomplish what I needed to happen, but that swiftly started giving me even more problem. At work, I use the Jenkins CI tool as a cron replacement (great tool, allows for distributed runs, queuing tasks, emails on failure, etc), but it seemed rather heavy weight for a homelab.</description>
    </item>
    
    <item>
      <title>Flashing LSI SAS 9211-8i with EFI</title>
      <link>https://smuth.me/post/flashing-lsi-sas-9211-8i-with-efi/</link>
      <pubDate>Sun, 08 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://smuth.me/post/flashing-lsi-sas-9211-8i-with-efi/</guid>
      <description>I recently went on an upgrade crusade to my homelab, and as part of that, upgraded FreeNAS to 9.3. When I did, there was a non-urgent alert about a driver mismatch for my LSI HBA (FreeNAS expected 16, LSI had 12). Thus, I decided to upgrade the firmware.
Directions This assumes that your server can boot directly into an EFI shell. It might require a Shell.efi for some motherboards, but I can&#39;t tell you much more than that, as it boots straight to EFI on mine.</description>
    </item>
    
    <item>
      <title>Using Heritrix to archive sites to a directory structure</title>
      <link>https://smuth.me/post/using-heretrix-to-archive-sites-to-a-directory-structure/</link>
      <pubDate>Tue, 12 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://smuth.me/post/using-heretrix-to-archive-sites-to-a-directory-structure/</guid>
      <description>So I one day I found myself in the market for a good web archiver. Specifically, there were some interesting open directories I wanted to mirror. My ideal solution would be a web front end around wget, but a little bit of research and testing showed that such an architecture would be too simplistic for the level of detail I wanted. There were a couple spider frameworks I tried out, like scrapy, but I wasn&#39;t enthusiastic about the prospect of trying to roll my own solution, when I knew sites like the Internet Archive had the exact kind of thing I had in mind, and they use the Heritrix engine archive their material.</description>
    </item>
    
    <item>
      <title>Check_mk and FreeNAS, Pt. 3</title>
      <link>https://smuth.me/post/check_mk-and-freenas-pt-3/</link>
      <pubDate>Thu, 10 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://smuth.me/post/check_mk-and-freenas-pt-3/</guid>
      <description>A continuation of Check_mk and FreeNAS, Pt. 2
Now that we have all our smart data nicely set up, let&#39;s see if we can&#39;t get some stats on I/O speed. I&#39;m pretty sure FreeNAS is supposed to have a I/O section in its &amp;quot;Reports&amp;quot; section, but for whatever reason, it&#39;s not in my install, and I&#39;d like to have the data in Nagios in any case.
Just like with the SMART data, we&#39;re going to write a small script that the check_mk agent can use.</description>
    </item>
    
    <item>
      <title>Check_mk and FreeNAS, Pt. 2</title>
      <link>https://smuth.me/post/check_mk-and-freenas-pt-2/</link>
      <pubDate>Fri, 25 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://smuth.me/post/check_mk-and-freenas-pt-2/</guid>
      <description>A continuation of Check_mk and FreeNAS, Pt. 1.
So I&#39;ve got my check_mk on set up on my NAS, and it&#39;s monitoring stuff beautifully. However, it&#39;s not monitoring something very near and dear to my heart for this server: S.M.A.R.T. data. FreeNAS comes with smartctl, and there&#39;s already S.M.A.R.T. data plugins for the linux agents, so I figured this wouldn&#39;t be a big deal. And I was right! All I had to do was add the following script to my plugins/ folder for check_mk to find, and the server picked it up automatically.</description>
    </item>
    
    <item>
      <title>Check_mk and FreeNAS</title>
      <link>https://smuth.me/post/check_mk-and-freenas/</link>
      <pubDate>Sun, 23 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://smuth.me/post/check_mk-and-freenas/</guid>
      <description>Note
Software involved:
FreeNAS 9.2.0 OMD 1.10 (check_mk 1.2.2p3)   FreeNAS is great, and the web interface makes it easy and simple to understand my NAS&#39;s overall structure. However, my favored method of monitoring in my homelab is OMD with Check_mk, while FreeNAS prefers a self-contained collectd solution. We&#39;re in luck however, in that FreeNAS is heavily based on FreeBSD, which check_mk happens to have a plugin for, so it shouldn&#39;t be too hard to set things up the way I like them.</description>
    </item>
    
    <item>
      <title>BASH Documentation</title>
      <link>https://smuth.me/post/bash-documentation/</link>
      <pubDate>Mon, 13 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://smuth.me/post/bash-documentation/</guid>
      <description>One of the things that always bothers me is lack of proper documentation. Now, I&amp;rsquo;m lazy just like everyone else, but if I&amp;rsquo;m going to document something, I prefer to do it properly and keep it up to date. I&amp;rsquo;ve inhierited a nice suite of bash scripts, which aren&amp;rsquo;t really complicated, but they all have the same copy &amp;amp; pasted header that&amp;rsquo;s dated from 2003. Not exactly helpful.
So while I have a wiki that explains how some of the processes work on a higher level, it would be nice to have clean documentation in my bash scripts.</description>
    </item>
    
    <item>
      <title>Fun with Basic PHP Optimization</title>
      <link>https://smuth.me/post/basic-php-optimization/</link>
      <pubDate>Thu, 09 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://smuth.me/post/basic-php-optimization/</guid>
      <description>A while ago I came across a full-featured PHP application for controlling a daemon. It worked well with a small data set, but quickly became laggy with a dataset numbering in the thousands. Admittedly, it really wasn&amp;rsquo;t built for that kind of load, so I removed it and controlled the daemon manually, which wasn&amp;rsquo;t a big deal.
Then a while later, I came across a post by someone who managed to mitigate the problem by shifting a particularly expensive operation to an external python program.</description>
    </item>
    
    <item>
      <title>Welcome to my blog</title>
      <link>https://smuth.me/post/welcome-to-my-blog/</link>
      <pubDate>Thu, 09 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://smuth.me/post/welcome-to-my-blog/</guid>
      <description>Hopefully I&amp;rsquo;ll be able to build this into a little repository of my tips, tricks and hacks as I navigate the strange and wonderful world of information technology. Maybe I&amp;rsquo;ll even improve my writing, or help someone out with an obscure problem. The possibilities are endless! (For specific definitions of endless.)</description>
    </item>
    
  </channel>
</rss>