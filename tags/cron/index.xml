<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cron on cat /dev/null &gt; /proc/mind</title>
    <link>https://smuth.me/tags/cron/</link>
    <description>Recent content in Cron on cat /dev/null &gt; /proc/mind</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 11 Apr 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://smuth.me/tags/cron/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Using shush as a crontab wrapper</title>
      <link>https://smuth.me/post/using-shush-as-a-crontab-wrapper/</link>
      <pubDate>Sat, 11 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://smuth.me/post/using-shush-as-a-crontab-wrapper/</guid>
      <description>&lt;div class=&#34;document&#34;&gt;


&lt;!-- title: Using shush as a crontab wrapper --&gt;
&lt;!-- slug: using-shush-as-a-crontab-wrapper --&gt;
&lt;!-- date: 2015-04-11 15:24:09 UTC-04:00 --&gt;
&lt;!-- tags: cron --&gt;
&lt;!-- category: --&gt;
&lt;!-- link: --&gt;
&lt;!-- description: --&gt;
&lt;!-- type: text --&gt;
&lt;p&gt;&lt;a class=&#34;reference external&#34; href=&#34;http://linux.die.net/man/1/crontab&#34;&gt;Cron&lt;/a&gt; is a great tool for linux servers, but it&#39;s a very limited in it&#39;s capabilities (since it follows the Unix philosophy), so when I started to run up against those limits, I began doing all sorts of bash trickery to accomplish what I needed to happen, but that swiftly started giving me even more problem. At work, I use the &lt;a class=&#34;reference external&#34; href=&#34;https://jenkins-ci.org/&#34;&gt;Jenkins CI&lt;/a&gt; tool as a cron replacement (great tool, allows for distributed runs, queueing tasks, emails on failure, etc), but it seemed rather heavy weight for a homelab. Thankfully, there are a lot of cron wrappers/replacements out there, but I settled on &lt;a class=&#34;reference external&#34; href=&#34;http://web.taranis.org/shush/&#34;&gt;shush&lt;/a&gt;, a neat little wrapper around script for cron.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;There are a couple reasons I like it:&lt;/p&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;The ability to manually run scripts under shush before adding them to cron&lt;/li&gt;
&lt;li&gt;Automatic crontab management&lt;/li&gt;
&lt;li&gt;Simple C binary, very few dependencies&lt;/li&gt;
&lt;li&gt;Text based config file&lt;/li&gt;
&lt;li&gt;Locking and timeout handling&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Basically how it works is that there&#39;s a designated directory that holds all the shush configuration files. These files can be named anything, although I usually have them be extensionless for simplicity. You can then run any of these files with &lt;tt class=&#34;docutils literal&#34;&gt;shush &lt;span class=&#34;pre&#34;&gt;-c&lt;/span&gt; &amp;lt;directory&amp;gt; &amp;lt;config_file_name&amp;gt;&lt;/tt&gt;. If you use the default directory of &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;$HOME/.shush/&lt;/span&gt;&lt;/tt&gt;, you can just run &lt;tt class=&#34;docutils literal&#34;&gt;shush &amp;lt;config_file_name&amp;gt;&lt;/tt&gt;. However, in order to have the config file run regularly, you need to set the &lt;tt class=&#34;docutils literal&#34;&gt;schedule&lt;/tt&gt; setting, and run &lt;tt class=&#34;docutils literal&#34;&gt;shush &lt;span class=&#34;pre&#34;&gt;-c&lt;/span&gt; &amp;lt;directory&amp;gt; &lt;span class=&#34;pre&#34;&gt;-u&lt;/span&gt;&lt;/tt&gt; to update the crontab file.&lt;/p&gt;
&lt;p&gt;The &lt;a class=&#34;reference external&#34; href=&#34;http://web.taranis.org/shush/shush.1.html&#34;&gt;man page&lt;/a&gt; has some more documentation, but I&#39;ll at least break down the example config file make it more understandable.&lt;/p&gt;
&lt;p&gt;Set the command &lt;tt class=&#34;docutils literal&#34;&gt;shush &lt;span class=&#34;pre&#34;&gt;-c&lt;/span&gt; /etc/shush &lt;span class=&#34;pre&#34;&gt;-u&lt;/span&gt;&lt;/tt&gt; to run every day at 9 PM:&lt;/p&gt;
&lt;pre class=&#34;code literal-block&#34;&gt;
command=shush -c /etc/shush -u
schedule=0 9 * * *
&lt;/pre&gt;
&lt;p&gt;Use a lockfile. If a lockfile already exists, send an email to root and root-logs, then abort the job:&lt;/p&gt;
&lt;pre class=&#34;code literal-block&#34;&gt;
lock=notify=root root-logs,abort
&lt;/pre&gt;
&lt;p&gt;Send out an email notification if the script is still running after 5 minutes, but keep the script alive:&lt;/p&gt;
&lt;pre class=&#34;code literal-block&#34;&gt;
timeout=5m,notify=root root-logs
&lt;/pre&gt;
&lt;p&gt;Print stderr output first, use the &lt;tt class=&#34;docutils literal&#34;&gt;text&lt;/tt&gt; format, and set the email subject:&lt;/p&gt;
&lt;pre class=&#34;code literal-block&#34;&gt;
stderr=first
format=text
Subject=Crontab Daily Update
&lt;/pre&gt;
&lt;p&gt;Always send an email to root-logs:&lt;/p&gt;
&lt;pre class=&#34;code literal-block&#34;&gt;
[logs]
to=root-logs
&lt;/pre&gt;
&lt;p&gt;If one of the various failure conditions applies, send an email to root:&lt;/p&gt;
&lt;pre class=&#34;code literal-block&#34;&gt;
[readers]
if=$exit != 0 || $outlines != 1 || $errsize &amp;gt; 0 || U
to=root
format=rich
&lt;/pre&gt;
&lt;p&gt;Shush is a very powerful tool, and I&#39;m very happy with the ways that I&#39;ve been able to implement it in my homelab. However, it can be a bit confusing for a beginner, and the regex matching features leave much to be desired. With the intention of fixing things up, I&#39;ve create a repositoty at &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/smuth4/shush&#34;&gt;https://github.com/smuth4/shush&lt;/a&gt;, which I can hopefully use to clean up things, and get the project active again. Feel free to compile, try out and mayb even contribute to this neat little tool!&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>